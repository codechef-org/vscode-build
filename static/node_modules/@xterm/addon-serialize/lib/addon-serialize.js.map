{"version":3,"file":"addon-serialize.js","mappings":"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","sources":["webpack://SerializeAddon/webpack/universalModuleDefinition","webpack://SerializeAddon/../../src/browser/Types.ts","webpack://SerializeAddon/../../src/common/Color.ts","webpack://SerializeAddon/webpack/bootstrap","webpack://SerializeAddon/./src/SerializeAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SerializeAddon\"] = factory();\n\telse\n\t\troot[\"SerializeAddon\"] = factory();\n})(globalThis, () => {\nreturn ","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IColor, ICoreTerminal, ITerminalOptions } from 'common/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IDisposable, Terminal as ITerminalApi } from '@xterm/xterm';\nimport { channels, css } from 'common/Color';\nimport type { Event } from 'vs/base/common/event';\n\n/**\n * A portion of the public API that are implemented identially internally and simply passed through.\n */\ntype InternalPassthroughApis = Omit<ITerminalApi, 'buffer' | 'parser' | 'unicode' | 'modes' | 'writeln' | 'loadAddon'>;\n\nexport interface ITerminal extends InternalPassthroughApis, ICoreTerminal {\n  screenElement: HTMLElement | undefined;\n  browser: IBrowser;\n  buffer: IBuffer;\n  linkifier: ILinkifier2 | undefined;\n  options: Required<ITerminalOptions>;\n\n  onBlur: Event<void>;\n  onFocus: Event<void>;\n  onA11yChar: Event<string>;\n  onA11yTab: Event<number>;\n  onWillOpen: Event<HTMLElement>;\n\n  cancel(ev: MouseEvent | WheelEvent | KeyboardEvent | InputEvent, force?: boolean): boolean | void;\n}\n\nexport type CustomKeyEventHandler = (event: KeyboardEvent) => boolean;\nexport type CustomWheelEventHandler = (event: WheelEvent) => boolean;\n\nexport type LineData = CharData[];\n\nexport interface ICompositionHelper {\n  readonly isComposing: boolean;\n  compositionstart(): void;\n  compositionupdate(ev: CompositionEvent): void;\n  compositionend(): void;\n  updateCompositionElements(dontRecurse?: boolean): void;\n  keydown(ev: KeyboardEvent): boolean;\n}\n\nexport interface IBrowser {\n  isNode: boolean;\n  userAgent: string;\n  platform: string;\n  isFirefox: boolean;\n  isMac: boolean;\n  isIpad: boolean;\n  isIphone: boolean;\n  isWindows: boolean;\n}\n\nexport interface IColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  cursorAccent: IColor;\n  selectionForeground: IColor | undefined;\n  selectionBackgroundTransparent: IColor;\n  /** The selection blended on top of background. */\n  selectionBackgroundOpaque: IColor;\n  selectionInactiveBackgroundTransparent: IColor;\n  selectionInactiveBackgroundOpaque: IColor;\n  scrollbarSliderBackground: IColor;\n  scrollbarSliderHoverBackground: IColor;\n  scrollbarSliderActiveBackground: IColor;\n  overviewRulerBorder: IColor;\n  ansi: IColor[];\n  /** Maps original colors to colors that respect minimum contrast ratio. */\n  contrastCache: IColorContrastCache;\n  /** Maps original colors to colors that respect _half_ of the minimum contrast ratio. */\n  halfContrastCache: IColorContrastCache;\n}\n\nexport type ReadonlyColorSet = Readonly<Omit<IColorSet, 'ansi'>> & { ansi: Readonly<Pick<IColorSet, 'ansi'>['ansi']> };\n\nexport interface IColorContrastCache {\n  clear(): void;\n  setCss(bg: number, fg: number, value: string | null): void;\n  getCss(bg: number, fg: number): string | null | undefined;\n  setColor(bg: number, fg: number, value: IColor | null): void;\n  getColor(bg: number, fg: number): IColor | null | undefined;\n}\n\nexport interface IPartialColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor?: IColor;\n  cursorAccent?: IColor;\n  selectionBackground?: IColor;\n  ansi: IColor[];\n}\n\nexport interface IViewport extends IDisposable {\n  scrollBarWidth: number;\n  readonly onRequestScrollLines: Event<{ amount: number, suppressScrollEvent: boolean }>;\n  syncScrollArea(immediate?: boolean, force?: boolean): void;\n  getLinesScrolled(ev: WheelEvent): number;\n  getBufferElements(startLine: number, endLine?: number): { bufferElements: HTMLElement[], cursorElement?: HTMLElement };\n  handleWheel(ev: WheelEvent): boolean;\n  handleTouchStart(ev: TouchEvent): void;\n  handleTouchMove(ev: TouchEvent): boolean;\n  scrollLines(disp: number): void;  // todo api name?\n  reset(): void;\n}\n\nexport interface ILinkifierEvent {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  cols: number;\n  fg: number | undefined;\n}\n\ninterface ILinkState {\n  decorations: ILinkDecorations;\n  isHovered: boolean;\n}\nexport interface ILinkWithState {\n  link: ILink;\n  state?: ILinkState;\n}\n\nexport interface ILinkifier2 extends IDisposable {\n  onShowLinkUnderline: Event<ILinkifierEvent>;\n  onHideLinkUnderline: Event<ILinkifierEvent>;\n  readonly currentLink: ILinkWithState | undefined;\n}\n\nexport interface ILink {\n  range: IBufferRange;\n  text: string;\n  decorations?: ILinkDecorations;\n  activate(event: MouseEvent, text: string): void;\n  hover?(event: MouseEvent, text: string): void;\n  leave?(event: MouseEvent, text: string): void;\n  dispose?(): void;\n}\n\nexport interface ILinkDecorations {\n  pointerCursor: boolean;\n  underline: boolean;\n}\n\nexport interface IBufferRange {\n  start: IBufferCellPosition;\n  end: IBufferCellPosition;\n}\n\nexport interface IBufferCellPosition {\n  x: number;\n  y: number;\n}\n\nexport type CharacterJoinerHandler = (text: string) => [number, number][];\n\nexport interface ICharacterJoiner {\n  id: number;\n  handler: CharacterJoinerHandler;\n}\n\nexport interface IRenderDebouncer extends IDisposable {\n  refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void;\n}\n\nexport interface IRenderDebouncerWithCallback extends IRenderDebouncer {\n  addRefreshCallback(callback: FrameRequestCallback): number;\n}\n\nexport interface IBufferElementProvider {\n  provideBufferElements(): DocumentFragment | HTMLElement;\n}\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return channels.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  // Attempt to set get the shared canvas context\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  try {\n    // This is guaranteed to run in the first window, so document should be correct\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n  catch {\n    // noop\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return channels.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return channels.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return channels.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function blend(bg: number, fg: number): number {\n    $a = (fg & 0xFF) / 0xFF;\n    if ($a === 1) {\n      return fg;\n    }\n    const fgR = (fg >> 24) & 0xFF;\n    const fgG = (fg >> 16) & 0xFF;\n    const fgB = (fg >> 8) & 0xFF;\n    const bgR = (bg >> 24) & 0xFF;\n    const bgG = (bg >> 16) & 0xFF;\n    const bgB = (bg >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    return channels.toRgba($r, $g, $b);\n  }\n\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * (EXPERIMENTAL) This Addon is still under development\n */\n\nimport type { IBuffer, IBufferCell, IBufferRange, ITerminalAddon, Terminal } from '@xterm/xterm';\nimport type { IHTMLSerializeOptions, SerializeAddon as ISerializeApi, ISerializeOptions, ISerializeRange } from '@xterm/addon-serialize';\nimport { IAttributeData, IColor } from 'common/Types';\nimport { DEFAULT_ANSI_COLORS } from 'browser/Types';\n\nfunction constrain(value: number, low: number, high: number): number {\n  return Math.max(low, Math.min(value, high));\n}\n\nfunction escapeHTMLChar(c: string): string {\n  switch (c) {\n    case '&': return '&amp;';\n    case '<': return '&lt;';\n  }\n  return c;\n}\n\n// TODO: Refine this template class later\nabstract class BaseSerializeHandler {\n  constructor(\n    protected readonly _buffer: IBuffer\n  ) {\n  }\n\n  public serialize(range: IBufferRange, excludeFinalCursorPosition?: boolean): string {\n    // we need two of them to flip between old and new cell\n    const cell1 = this._buffer.getNullCell();\n    const cell2 = this._buffer.getNullCell();\n    let oldCell = cell1;\n\n    const startRow = range.start.y;\n    const endRow = range.end.y;\n    const startColumn = range.start.x;\n    const endColumn = range.end.x;\n\n    this._beforeSerialize(endRow - startRow, startRow, endRow);\n\n    for (let row = startRow; row <= endRow; row++) {\n      const line = this._buffer.getLine(row);\n      if (line) {\n        const startLineColumn = row === range.start.y ? startColumn : 0;\n        const endLineColumn = row === range.end.y ? endColumn: line.length;\n        for (let col = startLineColumn; col < endLineColumn; col++) {\n          const c = line.getCell(col, oldCell === cell1 ? cell2 : cell1);\n          if (!c) {\n            console.warn(`Can't get cell at row=${row}, col=${col}`);\n            continue;\n          }\n          this._nextCell(c, oldCell, row, col);\n          oldCell = c;\n        }\n      }\n      this._rowEnd(row, row === endRow);\n    }\n\n    this._afterSerialize();\n\n    return this._serializeString(excludeFinalCursorPosition);\n  }\n\n  protected _nextCell(cell: IBufferCell, oldCell: IBufferCell, row: number, col: number): void { }\n  protected _rowEnd(row: number, isLastRow: boolean): void { }\n  protected _beforeSerialize(rows: number, startRow: number, endRow: number): void { }\n  protected _afterSerialize(): void { }\n  protected _serializeString(excludeFinalCursorPosition?: boolean): string { return ''; }\n}\n\nfunction equalFg(cell1: IBufferCell | IAttributeData, cell2: IBufferCell): boolean {\n  return cell1.getFgColorMode() === cell2.getFgColorMode()\n    && cell1.getFgColor() === cell2.getFgColor();\n}\n\nfunction equalBg(cell1: IBufferCell | IAttributeData, cell2: IBufferCell): boolean {\n  return cell1.getBgColorMode() === cell2.getBgColorMode()\n    && cell1.getBgColor() === cell2.getBgColor();\n}\n\nfunction equalFlags(cell1: IBufferCell | IAttributeData, cell2: IBufferCell): boolean {\n  return cell1.isInverse() === cell2.isInverse()\n    && cell1.isBold() === cell2.isBold()\n    && cell1.isUnderline() === cell2.isUnderline()\n    && cell1.isOverline() === cell2.isOverline()\n    && cell1.isBlink() === cell2.isBlink()\n    && cell1.isInvisible() === cell2.isInvisible()\n    && cell1.isItalic() === cell2.isItalic()\n    && cell1.isDim() === cell2.isDim()\n    && cell1.isStrikethrough() === cell2.isStrikethrough();\n}\n\nclass StringSerializeHandler extends BaseSerializeHandler {\n  private _rowIndex: number = 0;\n  private _allRows: string[] = new Array<string>();\n  private _allRowSeparators: string[] = new Array<string>();\n  private _currentRow: string = '';\n  private _nullCellCount: number = 0;\n\n  // we can see a full colored cell and a null cell that only have background the same style\n  // but the information isn't preserved by null cell itself\n  // so wee need to record it when required.\n  private _cursorStyle: IBufferCell = this._buffer.getNullCell();\n\n  // where exact the cursor styles comes from\n  // because we can't copy the cell directly\n  // so we remember where the content comes from instead\n  private _cursorStyleRow: number = 0;\n  private _cursorStyleCol: number = 0;\n\n  // this is a null cell for reference for checking whether background is empty or not\n  private _backgroundCell: IBufferCell = this._buffer.getNullCell();\n\n  private _firstRow: number = 0;\n  private _lastCursorRow: number = 0;\n  private _lastCursorCol: number = 0;\n  private _lastContentCursorRow: number = 0;\n  private _lastContentCursorCol: number = 0;\n\n  constructor(\n    buffer: IBuffer,\n    private readonly _terminal: Terminal\n  ) {\n    super(buffer);\n  }\n\n  protected _beforeSerialize(rows: number, start: number, end: number): void {\n    this._allRows = new Array<string>(rows);\n    this._lastContentCursorRow = start;\n    this._lastCursorRow = start;\n    this._firstRow = start;\n  }\n\n  private _thisRowLastChar: IBufferCell = this._buffer.getNullCell();\n  private _thisRowLastSecondChar: IBufferCell = this._buffer.getNullCell();\n  private _nextRowFirstChar: IBufferCell = this._buffer.getNullCell();\n  protected _rowEnd(row: number, isLastRow: boolean): void {\n    // if there is colorful empty cell at line end, whe must pad it back, or the the color block\n    // will missing\n    if (this._nullCellCount > 0 && !equalBg(this._cursorStyle, this._backgroundCell)) {\n      // use clear right to set background.\n      this._currentRow += `\\u001b[${this._nullCellCount}X`;\n    }\n\n    let rowSeparator = '';\n\n    // handle row separator\n    if (!isLastRow) {\n      // Enable BCE\n      if (row - this._firstRow >= this._terminal.rows) {\n        this._buffer.getLine(this._cursorStyleRow)?.getCell(this._cursorStyleCol, this._backgroundCell);\n      }\n\n      // Fetch current line\n      const currentLine = this._buffer.getLine(row)!;\n      // Fetch next line\n      const nextLine = this._buffer.getLine(row + 1)!;\n\n      if (!nextLine.isWrapped) {\n        // just insert the line break\n        rowSeparator = '\\r\\n';\n        // we sended the enter\n        this._lastCursorRow = row + 1;\n        this._lastCursorCol = 0;\n      } else {\n        rowSeparator = '';\n        const thisRowLastChar = currentLine.getCell(currentLine.length - 1, this._thisRowLastChar)!;\n        const thisRowLastSecondChar = currentLine.getCell(currentLine.length - 2, this._thisRowLastSecondChar)!;\n        const nextRowFirstChar = nextLine.getCell(0, this._nextRowFirstChar)!;\n        const isNextRowFirstCharDoubleWidth = nextRowFirstChar.getWidth() > 1;\n\n        // validate whether this line wrap is ever possible\n        // which mean whether cursor can placed at a overflow position (x === row) naturally\n        let isValid = false;\n\n        if (\n          // you must output character to cause overflow, control sequence can't do this\n          nextRowFirstChar.getChars() &&\n            isNextRowFirstCharDoubleWidth ? this._nullCellCount <= 1 : this._nullCellCount <= 0\n        ) {\n          if (\n            // the last character can't be null,\n            // you can't use control sequence to move cursor to (x === row)\n            (thisRowLastChar.getChars() || thisRowLastChar.getWidth() === 0) &&\n            // change background of the first wrapped cell also affects BCE\n            // so we mark it as invalid to simply the process to determine line separator\n            equalBg(thisRowLastChar, nextRowFirstChar)\n          ) {\n            isValid = true;\n          }\n\n          if (\n            // the second to last character can't be null if the next line starts with CJK,\n            // you can't use control sequence to move cursor to (x === row)\n            isNextRowFirstCharDoubleWidth &&\n            (thisRowLastSecondChar.getChars() || thisRowLastSecondChar.getWidth() === 0) &&\n            // change background of the first wrapped cell also affects BCE\n            // so we mark it as invalid to simply the process to determine line separator\n            equalBg(thisRowLastChar, nextRowFirstChar) &&\n            equalBg(thisRowLastSecondChar, nextRowFirstChar)\n          ) {\n            isValid = true;\n          }\n        }\n\n        if (!isValid) {\n          // force the wrap with magic\n          // insert enough character to force the wrap\n          rowSeparator = '-'.repeat(this._nullCellCount + 1);\n          // move back and erase next line head\n          rowSeparator += '\\u001b[1D\\u001b[1X';\n\n          if (this._nullCellCount > 0) {\n            // do these because we filled the last several null slot, which we shouldn't\n            rowSeparator += '\\u001b[A';\n            rowSeparator += `\\u001b[${currentLine.length - this._nullCellCount}C`;\n            rowSeparator += `\\u001b[${this._nullCellCount}X`;\n            rowSeparator += `\\u001b[${currentLine.length - this._nullCellCount}D`;\n            rowSeparator += '\\u001b[B';\n          }\n\n          // This is content and need the be serialized even it is invisible.\n          // without this, wrap will be missing from outputs.\n          this._lastContentCursorRow = row + 1;\n          this._lastContentCursorCol = 0;\n\n          // force commit the cursor position\n          this._lastCursorRow = row + 1;\n          this._lastCursorCol = 0;\n        }\n      }\n    }\n\n    this._allRows[this._rowIndex] = this._currentRow;\n    this._allRowSeparators[this._rowIndex++] = rowSeparator;\n    this._currentRow = '';\n    this._nullCellCount = 0;\n  }\n\n  private _diffStyle(cell: IBufferCell | IAttributeData, oldCell: IBufferCell): number[] {\n    const sgrSeq: number[] = [];\n    const fgChanged = !equalFg(cell, oldCell);\n    const bgChanged = !equalBg(cell, oldCell);\n    const flagsChanged = !equalFlags(cell, oldCell);\n\n    if (fgChanged || bgChanged || flagsChanged) {\n      if (cell.isAttributeDefault()) {\n        if (!oldCell.isAttributeDefault()) {\n          sgrSeq.push(0);\n        }\n      } else {\n        if (fgChanged) {\n          const color = cell.getFgColor();\n          if (cell.isFgRGB()) { sgrSeq.push(38, 2, (color >>> 16) & 0xFF, (color >>> 8) & 0xFF, color & 0xFF); }\n          else if (cell.isFgPalette()) {\n            if (color >= 16) { sgrSeq.push(38, 5, color); }\n            else { sgrSeq.push(color & 8 ? 90 + (color & 7) : 30 + (color & 7)); }\n          }\n          else { sgrSeq.push(39); }\n        }\n        if (bgChanged) {\n          const color = cell.getBgColor();\n          if (cell.isBgRGB()) { sgrSeq.push(48, 2, (color >>> 16) & 0xFF, (color >>> 8) & 0xFF, color & 0xFF); }\n          else if (cell.isBgPalette()) {\n            if (color >= 16) { sgrSeq.push(48, 5, color); }\n            else { sgrSeq.push(color & 8 ? 100 + (color & 7) : 40 + (color & 7)); }\n          }\n          else { sgrSeq.push(49); }\n        }\n        if (flagsChanged) {\n          if (cell.isInverse() !== oldCell.isInverse()) { sgrSeq.push(cell.isInverse() ? 7 : 27); }\n          if (cell.isBold() !== oldCell.isBold()) { sgrSeq.push(cell.isBold() ? 1 : 22); }\n          if (cell.isUnderline() !== oldCell.isUnderline()) { sgrSeq.push(cell.isUnderline() ? 4 : 24); }\n          if (cell.isOverline() !== oldCell.isOverline()) { sgrSeq.push(cell.isOverline() ? 53 : 55); }\n          if (cell.isBlink() !== oldCell.isBlink()) { sgrSeq.push(cell.isBlink() ? 5 : 25); }\n          if (cell.isInvisible() !== oldCell.isInvisible()) { sgrSeq.push(cell.isInvisible() ? 8 : 28); }\n          if (cell.isItalic() !== oldCell.isItalic()) { sgrSeq.push(cell.isItalic() ? 3 : 23); }\n          if (cell.isDim() !== oldCell.isDim()) { sgrSeq.push(cell.isDim() ? 2 : 22); }\n          if (cell.isStrikethrough() !== oldCell.isStrikethrough()) { sgrSeq.push(cell.isStrikethrough() ? 9 : 29); }\n        }\n      }\n    }\n\n    return sgrSeq;\n  }\n\n  protected _nextCell(cell: IBufferCell, oldCell: IBufferCell, row: number, col: number): void {\n    // a width 0 cell don't need to be count because it is just a placeholder after a CJK character;\n    const isPlaceHolderCell = cell.getWidth() === 0;\n\n    if (isPlaceHolderCell) {\n      return;\n    }\n\n    // this cell don't have content\n    const isEmptyCell = cell.getChars() === '';\n\n    const sgrSeq = this._diffStyle(cell, this._cursorStyle);\n\n    // the empty cell style is only assumed to be changed when background changed, because\n    // foreground is always 0.\n    const styleChanged = isEmptyCell ? !equalBg(this._cursorStyle, cell) : sgrSeq.length > 0;\n\n    /**\n     *  handles style change\n     */\n    if (styleChanged) {\n      // before update the style, we need to fill empty cell back\n      if (this._nullCellCount > 0) {\n        // use clear right to set background.\n        if (!equalBg(this._cursorStyle, this._backgroundCell)) {\n          this._currentRow += `\\u001b[${this._nullCellCount}X`;\n        }\n        // use move right to move cursor.\n        this._currentRow += `\\u001b[${this._nullCellCount}C`;\n        this._nullCellCount = 0;\n      }\n\n      this._lastContentCursorRow = this._lastCursorRow = row;\n      this._lastContentCursorCol = this._lastCursorCol = col;\n\n      this._currentRow += `\\u001b[${sgrSeq.join(';')}m`;\n\n      // update the last cursor style\n      const line = this._buffer.getLine(row);\n      if (line !== undefined) {\n        line.getCell(col, this._cursorStyle);\n        this._cursorStyleRow = row;\n        this._cursorStyleCol = col;\n      }\n    }\n\n    /**\n     *  handles actual content\n     */\n    if (isEmptyCell) {\n      this._nullCellCount += cell.getWidth();\n    } else {\n      if (this._nullCellCount > 0) {\n        // we can just assume we have same style with previous one here\n        // because style change is handled by previous stage\n        // use move right when background is empty, use clear right when there is background.\n        if (equalBg(this._cursorStyle, this._backgroundCell)) {\n          this._currentRow += `\\u001b[${this._nullCellCount}C`;\n        } else {\n          this._currentRow += `\\u001b[${this._nullCellCount}X`;\n          this._currentRow += `\\u001b[${this._nullCellCount}C`;\n        }\n        this._nullCellCount = 0;\n      }\n\n      this._currentRow += cell.getChars();\n\n      // update cursor\n      this._lastContentCursorRow = this._lastCursorRow = row;\n      this._lastContentCursorCol = this._lastCursorCol = col + cell.getWidth();\n    }\n  }\n\n  protected _serializeString(excludeFinalCursorPosition: boolean): string {\n    let rowEnd = this._allRows.length;\n\n    // the fixup is only required for data without scrollback\n    // because it will always be placed at last line otherwise\n    if (this._buffer.length - this._firstRow <= this._terminal.rows) {\n      rowEnd = this._lastContentCursorRow + 1 - this._firstRow;\n      this._lastCursorCol = this._lastContentCursorCol;\n      this._lastCursorRow = this._lastContentCursorRow;\n    }\n\n    let content = '';\n\n    for (let i = 0; i < rowEnd; i++) {\n      content += this._allRows[i];\n      if (i + 1 < rowEnd) {\n        content += this._allRowSeparators[i];\n      }\n    }\n\n    // restore the cursor\n    if (!excludeFinalCursorPosition) {\n      const realCursorRow = this._buffer.baseY + this._buffer.cursorY;\n      const realCursorCol = this._buffer.cursorX;\n\n      const cursorMoved = (realCursorRow !== this._lastCursorRow || realCursorCol !== this._lastCursorCol);\n\n      const moveRight = (offset: number): void => {\n        if (offset > 0) {\n          content += `\\u001b[${offset}C`;\n        } else if (offset < 0) {\n          content += `\\u001b[${-offset}D`;\n        }\n      };\n      const moveDown = (offset: number): void => {\n        if (offset > 0) {\n          content += `\\u001b[${offset}B`;\n        } else if (offset < 0) {\n          content += `\\u001b[${-offset}A`;\n        }\n      };\n\n      if (cursorMoved) {\n        moveDown(realCursorRow - this._lastCursorRow);\n        moveRight(realCursorCol - this._lastCursorCol);\n      }\n    }\n\n    // Restore the cursor's current style, see https://github.com/xtermjs/xterm.js/issues/3677\n    // HACK: Internal API access since it's awkward to expose this in the API and serialize will\n    // likely be the only consumer\n    const curAttrData: IAttributeData = (this._terminal as any)._core._inputHandler._curAttrData;\n    const sgrSeq = this._diffStyle(curAttrData, this._cursorStyle);\n    if (sgrSeq.length > 0) {\n      content += `\\u001b[${sgrSeq.join(';')}m`;\n    }\n\n    return content;\n  }\n}\n\nexport class SerializeAddon implements ITerminalAddon , ISerializeApi {\n  private _terminal: Terminal | undefined;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  private _serializeBufferByScrollback(terminal: Terminal, buffer: IBuffer, scrollback?: number): string {\n    const maxRows = buffer.length;\n    const correctRows = (scrollback === undefined) ? maxRows : constrain(scrollback + terminal.rows, 0, maxRows);\n    return this._serializeBufferByRange(terminal, buffer, {\n      start: maxRows - correctRows,\n      end: maxRows - 1\n    }, false);\n  }\n\n  private _serializeBufferByRange(terminal: Terminal, buffer: IBuffer, range: ISerializeRange, excludeFinalCursorPosition: boolean): string {\n    const handler = new StringSerializeHandler(buffer, terminal);\n    return handler.serialize({\n      start: { x: 0,             y: typeof range.start === 'number' ? range.start : range.start.line },\n      end:   { x: terminal.cols, y: typeof range.end   === 'number' ? range.end   : range.end.line   }\n    }, excludeFinalCursorPosition);\n  }\n\n  private _serializeBufferAsHTML(terminal: Terminal, options: Partial<IHTMLSerializeOptions>): string {\n    const buffer = terminal.buffer.active;\n    const handler = new HTMLSerializeHandler(buffer, terminal, options);\n    const onlySelection = options.onlySelection ?? false;\n    if (!onlySelection) {\n      const maxRows = buffer.length;\n      const scrollback = options.scrollback;\n      const correctRows = (scrollback === undefined) ? maxRows : constrain(scrollback + terminal.rows, 0, maxRows);\n      return handler.serialize({\n        start: { x: 0,             y: maxRows - correctRows },\n        end:   { x: terminal.cols, y: maxRows - 1           }\n      });\n    }\n\n    const selection = this._terminal?.getSelectionPosition();\n    if (selection !== undefined) {\n      return handler.serialize({\n        start: { x: selection.start.x, y: selection.start.y },\n        end:   { x: selection.end.x,   y: selection.end.y   }\n      });\n    }\n\n    return '';\n  }\n\n  private _serializeModes(terminal: Terminal): string {\n    let content = '';\n    const modes = terminal.modes;\n\n    // Default: false\n    if (modes.applicationCursorKeysMode) content += '\\x1b[?1h';\n    if (modes.applicationKeypadMode) content += '\\x1b[?66h';\n    if (modes.bracketedPasteMode) content += '\\x1b[?2004h';\n    if (modes.insertMode) content += '\\x1b[4h';\n    if (modes.originMode) content += '\\x1b[?6h';\n    if (modes.reverseWraparoundMode) content += '\\x1b[?45h';\n    if (modes.sendFocusMode) content += '\\x1b[?1004h';\n\n    // Default: true\n    if (modes.wraparoundMode === false) content += '\\x1b[?7l';\n\n    // Default: 'none'\n    if (modes.mouseTrackingMode !== 'none') {\n      switch (modes.mouseTrackingMode) {\n        case 'x10': content += '\\x1b[?9h'; break;\n        case 'vt200': content += '\\x1b[?1000h'; break;\n        case 'drag': content += '\\x1b[?1002h'; break;\n        case 'any': content += '\\x1b[?1003h'; break;\n      }\n    }\n\n    return content;\n  }\n\n  public serialize(options?: ISerializeOptions): string {\n    // TODO: Add combinedData support\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    // Normal buffer\n    let content = options?.range\n      ? this._serializeBufferByRange(this._terminal, this._terminal.buffer.normal, options.range, true)\n      : this._serializeBufferByScrollback(this._terminal, this._terminal.buffer.normal, options?.scrollback);\n\n    // Alternate buffer\n    if (!options?.excludeAltBuffer) {\n      if (this._terminal.buffer.active.type === 'alternate') {\n        const alternativeScreenContent = this._serializeBufferByScrollback(this._terminal, this._terminal.buffer.alternate, undefined);\n        content += `\\u001b[?1049h\\u001b[H${alternativeScreenContent}`;\n      }\n    }\n\n    // Modes\n    if (!options?.excludeModes) {\n      content += this._serializeModes(this._terminal);\n    }\n\n    return content;\n  }\n\n  public serializeAsHTML(options?: Partial<IHTMLSerializeOptions>): string {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    return this._serializeBufferAsHTML(this._terminal, options || {});\n  }\n\n  public dispose(): void { }\n}\n\nexport class HTMLSerializeHandler extends BaseSerializeHandler {\n  private _currentRow: string = '';\n\n  private _htmlContent = '';\n\n  private _ansiColors: Readonly<IColor[]>;\n\n  constructor(\n    buffer: IBuffer,\n    private readonly _terminal: Terminal,\n    private readonly _options: Partial<IHTMLSerializeOptions>\n  ) {\n    super(buffer);\n\n    // For xterm headless: fallback to ansi colors\n    if ((_terminal as any)._core._themeService) {\n      this._ansiColors = (_terminal as any)._core._themeService.colors.ansi;\n    }\n    else {\n      this._ansiColors = DEFAULT_ANSI_COLORS;\n    }\n  }\n\n  private _padStart(target: string, targetLength: number, padString: string): string {\n    targetLength = targetLength >> 0;\n    padString = padString ?? ' ';\n    if (target.length > targetLength) {\n      return target;\n    }\n\n    targetLength -= target.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + target;\n  }\n\n  protected _beforeSerialize(rows: number, start: number, end: number): void {\n    this._htmlContent += '<html><body><!--StartFragment--><pre>';\n\n    let foreground = '#000000';\n    let background = '#ffffff';\n    if (this._options.includeGlobalBackground ?? false) {\n      foreground = this._terminal.options.theme?.foreground ?? '#ffffff';\n      background = this._terminal.options.theme?.background ?? '#000000';\n    }\n\n    const globalStyleDefinitions = [];\n    globalStyleDefinitions.push('color: ' + foreground + ';');\n    globalStyleDefinitions.push('background-color: ' + background + ';');\n    globalStyleDefinitions.push('font-family: ' + this._terminal.options.fontFamily + ';');\n    globalStyleDefinitions.push('font-size: ' + this._terminal.options.fontSize + 'px;');\n    this._htmlContent += '<div style=\\'' + globalStyleDefinitions.join(' ') + '\\'>';\n  }\n\n  protected _afterSerialize(): void {\n    this._htmlContent += '</div>';\n    this._htmlContent += '</pre><!--EndFragment--></body></html>';\n  }\n\n  protected _rowEnd(row: number, isLastRow: boolean): void {\n    this._htmlContent += '<div><span>' + this._currentRow + '</span></div>';\n    this._currentRow = '';\n  }\n\n  private _getHexColor(cell: IBufferCell, isFg: boolean): string | undefined {\n    const color = isFg ? cell.getFgColor() : cell.getBgColor();\n    if (isFg ? cell.isFgRGB() : cell.isBgRGB()) {\n      const rgb = [\n        (color >> 16) & 255,\n        (color >>  8) & 255,\n        (color      ) & 255\n      ];\n      return '#' + rgb.map(x => this._padStart(x.toString(16), 2, '0')).join('');\n    }\n    if (isFg ? cell.isFgPalette() : cell.isBgPalette()) {\n      return this._ansiColors[color].css;\n    }\n    return undefined;\n  }\n\n  private _diffStyle(cell: IBufferCell, oldCell: IBufferCell): string[] | undefined {\n    const content: string[] = [];\n\n    const fgChanged = !equalFg(cell, oldCell);\n    const bgChanged = !equalBg(cell, oldCell);\n    const flagsChanged = !equalFlags(cell, oldCell);\n\n    if (fgChanged || bgChanged || flagsChanged) {\n      const fgHexColor = this._getHexColor(cell, true);\n      if (fgHexColor) {\n        content.push('color: ' + fgHexColor + ';');\n      }\n\n      const bgHexColor = this._getHexColor(cell, false);\n      if (bgHexColor) {\n        content.push('background-color: ' + bgHexColor + ';');\n      }\n\n      if (cell.isInverse()) { content.push('color: #000000; background-color: #BFBFBF;'); }\n      if (cell.isBold()) { content.push('font-weight: bold;'); }\n      if (cell.isUnderline() && cell.isOverline()) { content.push('text-decoration: overline underline;'); }\n      else if (cell.isUnderline()) { content.push('text-decoration: underline;'); }\n      else if (cell.isOverline()) { content.push('text-decoration: overline;'); }\n      if (cell.isBlink()) { content.push('text-decoration: blink;'); }\n      if (cell.isInvisible()) { content.push('visibility: hidden;'); }\n      if (cell.isItalic()) { content.push('font-style: italic;'); }\n      if (cell.isDim()) { content.push('opacity: 0.5;'); }\n      if (cell.isStrikethrough()) { content.push('text-decoration: line-through;'); }\n\n      return content;\n    }\n\n    return undefined;\n  }\n\n  protected _nextCell(cell: IBufferCell, oldCell: IBufferCell, row: number, col: number): void {\n    // a width 0 cell don't need to be count because it is just a placeholder after a CJK character;\n    const isPlaceHolderCell = cell.getWidth() === 0;\n    if (isPlaceHolderCell) {\n      return;\n    }\n\n    // this cell don't have content\n    const isEmptyCell = cell.getChars() === '';\n\n    const styleDefinitions = this._diffStyle(cell, oldCell);\n\n    // handles style change\n    if (styleDefinitions) {\n      this._currentRow += styleDefinitions.length === 0 ?\n        '</span><span>' :\n        '</span><span style=\\'' + styleDefinitions.join(' ') + '\\'>';\n    }\n\n    // handles actual content\n    if (isEmptyCell) {\n      this._currentRow += ' ';\n    } else {\n      this._currentRow += escapeHTMLChar(cell.getChars());\n    }\n  }\n\n  protected _serializeString(): string {\n    return this._htmlContent;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","globalThis","DEFAULT_ANSI_COLORS","Object","freeze","colors","css","toColor","v","i","r","g","b","push","channels","toCss","rgba","toRgba","c","$r","$g","$b","$a","color","rgb","toPaddedHex","s","toString","length","contrastRatio","l1","l2","NULL_COLOR","a","undefined","opacity","Math","round","toChannels","blend","bg","fg","fgR","fgG","fgB","bgR","bgG","bgB","isOpaque","ensureContrastRatio","ratio","result","opaque","rgbaColor","multiplyOpacity","factor","toColorRGB","$ctx","$litmusColor","canvas","document","createElement","width","height","ctx","getContext","willReadFrequently","globalCompositeOperation","createLinearGradient","match","parseInt","slice","repeat","rgbaMatch","parseFloat","Error","fillStyle","fillRect","getImageData","data","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","bgRgba","fgRgba","cr","max","ceil","increaseLuminance","min","bgL","fgL","resultA","resultARatio","resultB","value","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","constrain","low","high","BaseSerializeHandler","constructor","_buffer","serialize","range","excludeFinalCursorPosition","cell1","this","getNullCell","cell2","oldCell","startRow","start","y","endRow","end","startColumn","x","endColumn","_beforeSerialize","row","line","getLine","startLineColumn","endLineColumn","col","getCell","_nextCell","console","warn","_rowEnd","_afterSerialize","_serializeString","cell","isLastRow","rows","equalFg","getFgColorMode","getFgColor","equalBg","getBgColorMode","getBgColor","equalFlags","isInverse","isBold","isUnderline","isOverline","isBlink","isInvisible","isItalic","isDim","isStrikethrough","StringSerializeHandler","buffer","_terminal","super","_rowIndex","_allRows","Array","_allRowSeparators","_currentRow","_nullCellCount","_cursorStyle","_cursorStyleRow","_cursorStyleCol","_backgroundCell","_firstRow","_lastCursorRow","_lastCursorCol","_lastContentCursorRow","_lastContentCursorCol","_thisRowLastChar","_thisRowLastSecondChar","_nextRowFirstChar","rowSeparator","currentLine","nextLine","isWrapped","thisRowLastChar","thisRowLastSecondChar","nextRowFirstChar","isNextRowFirstCharDoubleWidth","getWidth","isValid","getChars","_diffStyle","sgrSeq","fgChanged","bgChanged","flagsChanged","isAttributeDefault","isFgRGB","isFgPalette","isBgRGB","isBgPalette","isEmptyCell","join","rowEnd","content","realCursorRow","baseY","cursorY","realCursorCol","cursorX","moveRight","offset","curAttrData","_core","_inputHandler","_curAttrData","activate","terminal","_serializeBufferByScrollback","scrollback","maxRows","correctRows","_serializeBufferByRange","cols","_serializeBufferAsHTML","options","active","handler","HTMLSerializeHandler","onlySelection","selection","getSelectionPosition","_serializeModes","modes","applicationCursorKeysMode","applicationKeypadMode","bracketedPasteMode","insertMode","originMode","reverseWraparoundMode","sendFocusMode","wraparoundMode","mouseTrackingMode","normal","excludeAltBuffer","type","alternate","excludeModes","serializeAsHTML","dispose","_options","_htmlContent","_themeService","_ansiColors","ansi","_padStart","target","targetLength","padString","foreground","background","includeGlobalBackground","theme","globalStyleDefinitions","fontFamily","fontSize","_getHexColor","isFg","map","fgHexColor","bgHexColor","styleDefinitions","escapeHTMLChar"],"sourceRoot":""}