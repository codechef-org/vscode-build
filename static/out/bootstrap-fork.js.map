{"version":3,"sources":["out-vscode-reh-web/vs/base/common/file:/root/vscode/src/vs/base/common/performance.ts","out-vscode-reh-web/file:/root/vscode/src/bootstrap-node.ts","out-vscode-reh-web/file:/root/vscode/src/bootstrap-esm.ts","out-vscode-reh-web/file:/root/vscode/src/bootstrap-meta.ts","out-vscode-reh-web/file:/root/vscode/src/bootstrap-fork.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { INodeProcess } from './platform.js';\n\nfunction _definePolyfillMarks(timeOrigin?: number) {\n\tconst _data: [string?, number?] = [];\n\tif (typeof timeOrigin === 'number') {\n\t\t_data.push('code/timeOrigin', timeOrigin);\n\t}\n\n\tfunction mark(name: string) {\n\t\t_data.push(name, Date.now());\n\t}\n\tfunction getMarks() {\n\t\tconst result = [];\n\t\tfor (let i = 0; i < _data.length; i += 2) {\n\t\t\tresult.push({\n\t\t\t\tname: _data[i],\n\t\t\t\tstartTime: _data[i + 1],\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\treturn { mark, getMarks };\n}\n\ndeclare const process: INodeProcess;\n\nfunction _define() {\n\n\t// Identify browser environment when following property is not present\n\t// https://nodejs.org/dist/latest-v16.x/docs/api/perf_hooks.html#performancenodetiming\n\t// @ts-ignore\n\tif (typeof performance === 'object' && typeof performance.mark === 'function' && !performance.nodeTiming) {\n\t\t// in a browser context, reuse performance-util\n\n\t\tif (typeof performance.timeOrigin !== 'number' && !performance.timing) {\n\t\t\t// safari & webworker: because there is no timeOrigin and no workaround\n\t\t\t// we use the `Date.now`-based polyfill.\n\t\t\treturn _definePolyfillMarks();\n\n\t\t} else {\n\t\t\t// use \"native\" performance for mark and getMarks\n\t\t\treturn {\n\t\t\t\tmark(name: string) {\n\t\t\t\t\tperformance.mark(name);\n\t\t\t\t},\n\t\t\t\tgetMarks() {\n\t\t\t\t\tlet timeOrigin = performance.timeOrigin;\n\t\t\t\t\tif (typeof timeOrigin !== 'number') {\n\t\t\t\t\t\t// safari: there is no timerOrigin but in renderers there is the timing-property\n\t\t\t\t\t\t// see https://bugs.webkit.org/show_bug.cgi?id=174862\n\t\t\t\t\t\ttimeOrigin = performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart;\n\t\t\t\t\t}\n\t\t\t\t\tconst result = [{ name: 'code/timeOrigin', startTime: Math.round(timeOrigin) }];\n\t\t\t\t\tfor (const entry of performance.getEntriesByType('mark')) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tname: entry.name,\n\t\t\t\t\t\t\tstartTime: Math.round(timeOrigin + entry.startTime)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t} else if (typeof process === 'object') {\n\t\t// node.js: use the normal polyfill but add the timeOrigin\n\t\t// from the node perf_hooks API as very first mark\n\t\tconst timeOrigin = performance?.timeOrigin;\n\t\treturn _definePolyfillMarks(timeOrigin);\n\n\t} else {\n\t\t// unknown environment\n\t\tconsole.trace('perf-util loaded in UNKNOWN environment');\n\t\treturn _definePolyfillMarks();\n\t}\n}\n\nfunction _factory(sharedObj: any) {\n\tif (!sharedObj.MonacoPerformanceMarks) {\n\t\tsharedObj.MonacoPerformanceMarks = _define();\n\t}\n\treturn sharedObj.MonacoPerformanceMarks;\n}\n\nconst perf = _factory(globalThis);\n\nexport const mark: (name: string) => void = perf.mark;\n\nexport interface PerformanceMark {\n\treadonly name: string;\n\treadonly startTime: number;\n}\n\n/**\n * Returns all marks, sorted by `startTime`.\n */\nexport const getMarks: () => PerformanceMark[] = perf.getMarks;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { createRequire } from 'node:module';\nimport type { IProductConfiguration } from './vs/base/common/product';\n\nconst require = createRequire(import.meta.url);\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\nError.stackTraceLimit = 100;\n\nif (!process.env['VSCODE_HANDLES_SIGPIPE']) {\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t// (https://github.com/electron/electron/issues/13254)\n\tlet didLogAboutSIGPIPE = false;\n\tprocess.on('SIGPIPE', () => {\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\n\t\t// In certain situations, the console itself can be in a broken pipe state\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\n\t\tif (!didLogAboutSIGPIPE) {\n\t\t\tdidLogAboutSIGPIPE = true;\n\t\t\tconsole.error(new Error(`Unexpected SIGPIPE`));\n\t\t}\n\t});\n}\n\n// Setup current working directory in all our node & electron processes\n// - Windows: call `process.chdir()` to always set application folder as cwd\n// -  all OS: store the `process.cwd()` inside `VSCODE_CWD` for consistent lookups\nfunction setupCurrentWorkingDirectory(): void {\n\ttry {\n\n\t\t// Store the `process.cwd()` inside `VSCODE_CWD`\n\t\t// for consistent lookups, but make sure to only\n\t\t// do this once unless defined already from e.g.\n\t\t// a parent process.\n\t\tif (typeof process.env['VSCODE_CWD'] !== 'string') {\n\t\t\tprocess.env['VSCODE_CWD'] = process.cwd();\n\t\t}\n\n\t\t// Windows: always set application folder as current working dir\n\t\tif (process.platform === 'win32') {\n\t\t\tprocess.chdir(path.dirname(process.execPath));\n\t\t}\n\t} catch (err) {\n\t\tconsole.error(err);\n\t}\n}\n\nsetupCurrentWorkingDirectory();\n\n/**\n * Add support for redirecting the loading of node modules\n *\n * Note: only applies when running out of sources.\n */\nexport function devInjectNodeModuleLookupPath(injectPath: string): void {\n\tif (!process.env['VSCODE_DEV']) {\n\t\treturn; // only applies running out of sources\n\t}\n\n\tif (!injectPath) {\n\t\tthrow new Error('Missing injectPath');\n\t}\n\n\t// register a loader hook\n\tconst Module = require('node:module');\n\tModule.register('./bootstrap-import.js', { parentURL: import.meta.url, data: injectPath });\n}\n\nexport function removeGlobalNodeJsModuleLookupPaths(): void {\n\tif (typeof process?.versions?.electron === 'string') {\n\t\treturn; // Electron disables global search paths in https://github.com/electron/electron/blob/3186c2f0efa92d275dc3d57b5a14a60ed3846b0e/shell/common/node_bindings.cc#L653\n\t}\n\n\tconst Module = require('module');\n\tconst globalPaths = Module.globalPaths;\n\n\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\tModule._resolveLookupPaths = function (moduleName: string, parent: any): string[] {\n\t\tconst paths = originalResolveLookupPaths(moduleName, parent);\n\t\tif (Array.isArray(paths)) {\n\t\t\tlet commonSuffixLength = 0;\n\t\t\twhile (commonSuffixLength < paths.length && paths[paths.length - 1 - commonSuffixLength] === globalPaths[globalPaths.length - 1 - commonSuffixLength]) {\n\t\t\t\tcommonSuffixLength++;\n\t\t\t}\n\n\t\t\treturn paths.slice(0, paths.length - commonSuffixLength);\n\t\t}\n\n\t\treturn paths;\n\t};\n}\n\n/**\n * Helper to enable portable mode.\n */\nexport function configurePortable(product: Partial<IProductConfiguration>): { portableDataPath: string; isPortable: boolean } {\n\tconst appRoot = path.dirname(__dirname);\n\n\tfunction getApplicationPath(): string {\n\t\tif (process.env['VSCODE_DEV']) {\n\t\t\treturn appRoot;\n\t\t}\n\n\t\tif (process.platform === 'darwin') {\n\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\n\t\t}\n\n\t\treturn path.dirname(path.dirname(appRoot));\n\t}\n\n\tfunction getPortableDataPath(): string {\n\t\tif (process.env['VSCODE_PORTABLE']) {\n\t\t\treturn process.env['VSCODE_PORTABLE'];\n\t\t}\n\n\t\tif (process.platform === 'win32' || process.platform === 'linux') {\n\t\t\treturn path.join(getApplicationPath(), 'data');\n\t\t}\n\n\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\n\t\treturn path.join(path.dirname(getApplicationPath()), portableDataName);\n\t}\n\n\tconst portableDataPath = getPortableDataPath();\n\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\n\tconst portableTempPath = path.join(portableDataPath, 'tmp');\n\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\n\n\tif (isPortable) {\n\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\n\t} else {\n\t\tdelete process.env['VSCODE_PORTABLE'];\n\t}\n\n\tif (isTempPortable) {\n\t\tif (process.platform === 'win32') {\n\t\t\tprocess.env['TMP'] = portableTempPath;\n\t\t\tprocess.env['TEMP'] = portableTempPath;\n\t\t} else {\n\t\t\tprocess.env['TMPDIR'] = portableTempPath;\n\t\t}\n\t}\n\n\treturn {\n\t\tportableDataPath,\n\t\tisPortable\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { createRequire, register } from 'node:module';\nimport { product, pkg } from './bootstrap-meta.js';\nimport './bootstrap-node.js';\nimport * as performance from './vs/base/common/performance.js';\nimport { INLSConfiguration } from './vs/nls.js';\n\nconst require = createRequire(import.meta.url);\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Install a hook to module resolution to map 'fs' to 'original-fs'\nif (process.env['ELECTRON_RUN_AS_NODE'] || process.versions['electron']) {\n\tconst jsCode = `\n\texport async function resolve(specifier, context, nextResolve) {\n\t\tif (specifier === 'fs') {\n\t\t\treturn {\n\t\t\t\tformat: 'builtin',\n\t\t\t\tshortCircuit: true,\n\t\t\t\turl: 'node:original-fs'\n\t\t\t};\n\t\t}\n\n\t\t// Defer to the next hook in the chain, which would be the\n\t\t// Node.js default resolve if this is the last user-specified loader.\n\t\treturn nextResolve(specifier, context);\n\t}`;\n\tregister(`data:text/javascript;base64,${Buffer.from(jsCode).toString('base64')}`, import.meta.url);\n}\n\n// Prepare globals that are needed for running\nglobalThis._VSCODE_PRODUCT_JSON = { ...product };\nif (process.env['VSCODE_DEV']) {\n\ttry {\n\t\tconst overrides = require('../product.overrides.json');\n\t\tglobalThis._VSCODE_PRODUCT_JSON = Object.assign(globalThis._VSCODE_PRODUCT_JSON, overrides);\n\t} catch (error) { /* ignore */ }\n}\nglobalThis._VSCODE_PACKAGE_JSON = { ...pkg };\nglobalThis._VSCODE_FILE_ROOT = __dirname;\n\n//#region NLS helpers\n\nlet setupNLSResult: Promise<INLSConfiguration | undefined> | undefined = undefined;\n\nfunction setupNLS(): Promise<INLSConfiguration | undefined> {\n\tif (!setupNLSResult) {\n\t\tsetupNLSResult = doSetupNLS();\n\t}\n\n\treturn setupNLSResult;\n}\n\nasync function doSetupNLS(): Promise<INLSConfiguration | undefined> {\n\tperformance.mark('code/willLoadNls');\n\n\tlet nlsConfig: INLSConfiguration | undefined = undefined;\n\n\tlet messagesFile: string | undefined;\n\tif (process.env['VSCODE_NLS_CONFIG']) {\n\t\ttry {\n\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\tif (nlsConfig?.languagePack?.messagesFile) {\n\t\t\t\tmessagesFile = nlsConfig.languagePack.messagesFile;\n\t\t\t} else if (nlsConfig?.defaultMessagesFile) {\n\t\t\t\tmessagesFile = nlsConfig.defaultMessagesFile;\n\t\t\t}\n\n\t\t\tglobalThis._VSCODE_NLS_LANGUAGE = nlsConfig?.resolvedLanguage;\n\t\t} catch (e) {\n\t\t\tconsole.error(`Error reading VSCODE_NLS_CONFIG from environment: ${e}`);\n\t\t}\n\t}\n\n\tif (\n\t\tprocess.env['VSCODE_DEV'] ||\t// no NLS support in dev mode\n\t\t!messagesFile\t\t\t\t\t// no NLS messages file\n\t) {\n\t\treturn undefined;\n\t}\n\n\ttry {\n\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(messagesFile)).toString());\n\t} catch (error) {\n\t\tconsole.error(`Error reading NLS messages file ${messagesFile}: ${error}`);\n\n\t\t// Mark as corrupt: this will re-create the language pack cache next startup\n\t\tif (nlsConfig?.languagePack?.corruptMarkerFile) {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.writeFile(nlsConfig.languagePack.corruptMarkerFile, 'corrupted');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error writing corrupted NLS marker file: ${error}`);\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to the default message file to ensure english translation at least\n\t\tif (nlsConfig?.defaultMessagesFile && nlsConfig.defaultMessagesFile !== messagesFile) {\n\t\t\ttry {\n\t\t\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(nlsConfig.defaultMessagesFile)).toString());\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error reading default NLS messages file ${nlsConfig.defaultMessagesFile}: ${error}`);\n\t\t\t}\n\t\t}\n\t}\n\n\tperformance.mark('code/didLoadNls');\n\n\treturn nlsConfig;\n}\n\n//#endregion\n\nexport async function bootstrapESM(): Promise<void> {\n\n\t// NLS\n\tawait setupNLS();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRequire } from 'node:module';\nimport type { IProductConfiguration } from './vs/base/common/product.js';\n\nconst require = createRequire(import.meta.url);\n\nlet productObj: Partial<IProductConfiguration> & { BUILD_INSERT_PRODUCT_CONFIGURATION?: string } = { BUILD_INSERT_PRODUCT_CONFIGURATION: 'BUILD_INSERT_PRODUCT_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (productObj['BUILD_INSERT_PRODUCT_CONFIGURATION']) {\n\tproductObj = require('../product.json'); // Running out of sources\n}\n\nlet pkgObj = { BUILD_INSERT_PACKAGE_CONFIGURATION: 'BUILD_INSERT_PACKAGE_CONFIGURATION' }; // DO NOT MODIFY, PATCHED DURING BUILD\nif (pkgObj['BUILD_INSERT_PACKAGE_CONFIGURATION']) {\n\tpkgObj = require('../package.json'); // Running out of sources\n}\n\nexport const product = productObj;\nexport const pkg = pkgObj;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from './vs/base/common/performance.js';\nimport { removeGlobalNodeJsModuleLookupPaths, devInjectNodeModuleLookupPath } from './bootstrap-node.js';\nimport { bootstrapESM } from './bootstrap-esm.js';\n\nperformance.mark('code/fork/start');\n\n//#region Helpers\n\nfunction pipeLoggingToParent(): void {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t */\n\tfunction safeToString(args: ArrayLike<unknown>): string {\n\t\tconst seen: string[] = [];\n\t\tconst argsArray: unknown[] = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\t\targ = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\tfunction safeSend(arg: { type: string; severity: string; arguments: string }): void {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\tfunction isObject(obj: unknown): boolean {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\tfunction safeSendConsoleMessage(severity: 'log' | 'warn' | 'error', args: string): void {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t */\n\tfunction wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error'): void {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToString(arguments)); },\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t */\n\tfunction wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error'): void {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk: string | Buffer | Uint8Array, encoding: BufferEncoding | undefined, callback: ((err?: Error | undefined) => void) | undefined) => {\n\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\tif (eol !== -1) {\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n\n\twrapStream('stderr', 'error');\n\twrapStream('stdout', 'log');\n}\n\nfunction handleExceptions(): void {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates(): void {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction configureCrashReporter(): void {\n\tconst crashReporterProcessType = process.env['VSCODE_CRASH_REPORTER_PROCESS_TYPE'];\n\tif (crashReporterProcessType) {\n\t\ttry {\n\t\t\t//@ts-ignore\n\t\t\tif (process['crashReporter'] && typeof process['crashReporter'].addExtraParameter === 'function' /* Electron only */) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tprocess['crashReporter'].addExtraParameter('processType', crashReporterProcessType);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n\n//#endregion\n\n// Crash reporter\nconfigureCrashReporter();\n\n// Remove global paths from the node module lookup (node.js only)\nremoveGlobalNodeJsModuleLookupPaths();\n\nif (process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tdevInjectNodeModuleLookupPath(process.env['VSCODE_DEV_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Bootstrap ESM\nawait bootstrapESM();\n\n// Load ESM entry point\nawait import([`./${process.env['VSCODE_ESM_ENTRYPOINT']}.js`].join('/') /* workaround: esbuild prints some strange warnings when trying to inline? */);\n"],"mappings":";;qsUAOA,SAASA,EAAqBC,EAAmB,CAChD,MAAMC,EAA4B,CAAA,EAC9B,OAAOD,GAAe,UACzBC,EAAM,KAAK,kBAAmBD,CAAU,EAGzC,SAASE,EAAKC,EAAY,CACzBF,EAAM,KAAKE,EAAM,KAAK,IAAG,CAAE,CAC5B,CACA,SAASC,GAAQ,CAChB,MAAMC,EAAS,CAAA,EACf,QAASC,EAAI,EAAGA,EAAIL,EAAM,OAAQK,GAAK,EACtCD,EAAO,KAAK,CACX,KAAMJ,EAAMK,CAAC,EACb,UAAWL,EAAMK,EAAI,CAAC,EACtB,EAEF,OAAOD,CACR,CACA,MAAO,CAAE,KAAAH,EAAM,SAAAE,CAAQ,CACxB,CAIA,SAASG,GAAO,CAKf,GAAI,OAAO,aAAgB,UAAY,OAAO,YAAY,MAAS,YAAc,CAAC,YAAY,WAG7F,OAAI,OAAO,YAAY,YAAe,UAAY,CAAC,YAAY,OAGvDR,EAAoB,EAIpB,CACN,KAAKI,EAAY,CAChB,YAAY,KAAKA,CAAI,CACtB,EACA,UAAQ,CACP,IAAIH,EAAa,YAAY,WACzB,OAAOA,GAAe,WAGzBA,EAAa,YAAY,OAAO,iBAAmB,YAAY,OAAO,eAAiB,YAAY,OAAO,YAE3G,MAAMK,EAAS,CAAC,CAAE,KAAM,kBAAmB,UAAW,KAAK,MAAML,CAAU,CAAC,CAAE,EAC9E,UAAWQ,KAAS,YAAY,iBAAiB,MAAM,EACtDH,EAAO,KAAK,CACX,KAAMG,EAAM,KACZ,UAAW,KAAK,MAAMR,EAAaQ,EAAM,SAAS,EAClD,EAEF,OAAOH,CACR,GAIH,GAAW,OAAO,SAAY,SAAU,CAGvC,MAAML,EAAa,aAAa,WAChC,OAAOD,EAAqBC,CAAU,CAEvC,KAEC,gBAAQ,MAAM,yCAAyC,EAChDD,EAAoB,CAE7B,CAEA,SAASU,EAASC,EAAc,CAC/B,OAAKA,EAAU,yBACdA,EAAU,uBAAyBH,EAAO,GAEpCG,EAAU,sBAClB,CAEA,IAAMC,EAAOF,EAAS,UAAU,EAEnBG,EAA+BD,EAAK,KAUpCE,GAAoCF,EAAK,SChGtD,UAAYG,MAAU,OACtB,MAAoB,KACpB,OAAS,iBAAAC,MAAqB,MAC9B,OAAS,iBAAAC,MAAqB,cAG9B,IAAMC,EAAUD,EAAc,YAAY,GAAG,EACvCE,GAAiBJ,EAAA,QAAQC,EAAc,YAAY,GAAG,CAAC,EAK7D,GAFA,MAAM,gBAAkB,IAEpB,CAAC,QAAQ,IAAI,uBAA2B,CAG3C,IAAII,EAAqB,GACzB,QAAQ,GAAG,UAAW,IAAK,CAIrBA,IACJA,EAAqB,GACrB,QAAQ,MAAM,IAAI,MAAM,oBAAoB,CAAC,EAE/C,CAAC,CACF,CAKA,SAASC,GAA4B,CACpC,GAAI,CAMC,OAAO,QAAQ,IAAI,YAAkB,WACxC,QAAQ,IAAI,WAAgB,QAAQ,IAAG,GAIpC,QAAQ,WAAa,SACxB,QAAQ,MAAWN,EAAA,QAAQ,QAAQ,QAAQ,CAAC,CAE9C,OAASO,EAAK,CACb,QAAQ,MAAMA,CAAG,CAClB,CACD,CAEAD,EAA4B,EAOtB,SAAUE,EAA8BC,EAAkB,CAC/D,GAAI,CAAC,QAAQ,IAAI,WAChB,OAGD,GAAI,CAACA,EACJ,MAAM,IAAI,MAAM,oBAAoB,EAItBN,EAAQ,aAAa,EAC7B,SAAS,wBAAyB,CAAE,UAAW,YAAY,IAAK,KAAMM,CAAU,CAAE,CAC1F,CAEM,SAAUC,GAAE,CACjB,GAAI,OAAO,SAAS,UAAU,UAAa,SAC1C,OAGD,MAAMC,EAASR,EAAQ,QAAQ,EACzBS,EAAcD,EAAO,YAErBE,EAA6BF,EAAO,oBAE1CA,EAAO,oBAAsB,SAAUG,EAAoBC,EAAW,CACrE,MAAMC,EAAQH,EAA2BC,EAAYC,CAAM,EAC3D,GAAI,MAAM,QAAQC,CAAK,EAAG,CACzB,IAAIC,EAAqB,EACzB,KAAOA,EAAqBD,EAAM,QAAUA,EAAMA,EAAM,OAAS,EAAIC,CAAkB,IAAML,EAAYA,EAAY,OAAS,EAAIK,CAAkB,GACnJA,IAGD,OAAOD,EAAM,MAAM,EAAGA,EAAM,OAASC,CAAkB,CACxD,CAEA,OAAOD,CACR,CACD,CC9FA,UAAYhB,MAAU,OACtB,UAAYkB,MAAQ,KACpB,OAAS,iBAAAjB,MAAqB,MAC9B,OAAS,iBAAAC,EAAe,YAAAiB,MAAgB,cCHxC,OAAS,iBAAAjB,MAAqB,cAG9B,IAAMC,EAAUD,EAAc,YAAY,GAAG,EAEzCkB,EAA+F,CAAE,mCAAoC,oCAAoC,EACzKA,EAAW,qCACdA,EAAajB,EAAQ,iBAAiB,GAGvC,IAAIkB,EAAS,CAAE,mCAAoC,oCAAoC,EACnFA,EAAO,qCACVA,EAASlB,EAAQ,iBAAiB,GAG5B,IAAMmB,EAAUF,EACVG,EAAMF,EDPblB,EAAUD,EAAc,YAAY,GAAG,EACvCE,EAAiBoB,EAAA,QAAQvB,EAAc,YAAY,GAAG,CAAC,EAuB7D,IApBI,QAAQ,IAAI,sBAA2B,QAAQ,SAAS,WAe3DkB,EAAS,+BAA+B,OAAO,KAdhC;;;;;;;;;;;;;GAc2C,EAAE,SAAS,QAAQ,CAAC,GAAI,YAAY,GAAG,EAIlG,WAAW,qBAAuB,CAAE,GAAGG,CAAE,EACrC,QAAQ,IAAI,WACf,GAAI,CACH,MAAMG,EAAYtB,EAAQ,2BAA2B,EACrD,WAAW,qBAAuB,OAAO,OAAO,WAAW,qBAAsBsB,CAAS,CAC3F,MAAgB,CAAe,CAEhC,WAAW,qBAAuB,CAAE,GAAGF,CAAE,EACzC,WAAW,kBAAoBnB,EAI/B,IAAIsB,EAAqE,OAEzE,SAASC,GAAQ,CAChB,OAAKD,IACJA,EAAiBE,EAAU,GAGrBF,CACR,CAEA,eAAeE,GAAU,CACZ9B,EAAK,kBAAkB,EAEnC,IAAI+B,EAEAC,EACJ,GAAI,QAAQ,IAAI,kBACf,GAAI,CACHD,EAAY,KAAK,MAAM,QAAQ,IAAI,iBAAoB,EACnDA,GAAW,cAAc,aAC5BC,EAAeD,EAAU,aAAa,aAC5BA,GAAW,sBACrBC,EAAeD,EAAU,qBAG1B,WAAW,qBAAuBA,GAAW,gBAC9C,OAASE,EAAG,CACX,QAAQ,MAAM,qDAAqDA,CAAC,EAAE,CACvE,CAGD,GACC,UAAQ,IAAI,YACZ,CAACD,GAKF,IAAI,CACH,WAAW,qBAAuB,KAAK,OAAO,MAASE,EAAA,SAAS,SAASF,CAAY,GAAG,SAAQ,CAAE,CACnG,OAASG,EAAO,CAIf,GAHA,QAAQ,MAAM,mCAAmCH,CAAY,KAAKG,CAAK,EAAE,EAGrEJ,GAAW,cAAc,kBAC5B,GAAI,CACH,MAASG,EAAA,SAAS,UAAUH,EAAU,aAAa,kBAAmB,WAAW,CAClF,OAASI,EAAO,CACf,QAAQ,MAAM,4CAA4CA,CAAK,EAAE,CAClE,CAID,GAAIJ,GAAW,qBAAuBA,EAAU,sBAAwBC,EACvE,GAAI,CACH,WAAW,qBAAuB,KAAK,OAAO,MAASE,EAAA,SAAS,SAASH,EAAU,mBAAmB,GAAG,SAAQ,CAAE,CACpH,OAASI,EAAO,CACf,QAAQ,MAAM,2CAA2CJ,EAAU,mBAAmB,KAAKI,CAAK,EAAE,CACnG,CAEF,CAEY,OAAAnC,EAAK,iBAAiB,EAE3B+B,EACR,CAIA,eAAsBK,GAAE,CAGvB,MAAMP,EAAQ,CACf,CEjHY7B,EAAK,iBAAiB,EAIlC,SAASqC,GAAmB,CAO3B,SAASC,EAAaC,EAAwB,CAC7C,MAAMC,EAAiB,CAAA,EACjBC,EAAuB,CAAA,EAG7B,GAAIF,EAAK,OACR,QAAS7C,EAAI,EAAGA,EAAI6C,EAAK,OAAQ7C,IAAK,CACrC,IAAIgD,EAAMH,EAAK7C,CAAC,EAKhB,GAAI,OAAOgD,EAAQ,IAClBA,EAAM,oBAKEA,aAAe,MAAO,CAC9B,MAAMC,EAAWD,EACbC,EAAS,MACZD,EAAMC,EAAS,MAEfD,EAAMC,EAAS,SAAQ,CAEzB,CAEAF,EAAU,KAAKC,CAAG,CACnB,CAGD,GAAI,CACH,MAAME,EAAM,KAAK,UAAUH,EAAW,SAAUI,EAAKC,EAAK,CAGzD,GAAIC,EAASD,CAAK,GAAK,MAAM,QAAQA,CAAK,EAAG,CAC5C,GAAIN,EAAK,QAAQM,CAAK,IAAM,GAC3B,MAAO,aAGRN,EAAK,KAAKM,CAAK,CAChB,CAEA,OAAOA,CACR,CAAC,EAED,OAAIF,EAAI,OAAS,IACT,4DAGDA,CACR,OAAST,EAAO,CACf,MAAO,2DAA2DA,EAAM,SAAQ,CAAE,IACnF,CACD,CAEA,SAASa,EAASN,EAA0D,CAC3E,GAAI,CACC,QAAQ,MACX,QAAQ,KAAKA,CAAG,CAElB,MAAgB,CAEhB,CACD,CAEA,SAASK,EAASE,EAAY,CAC7B,OAAO,OAAOA,GAAQ,UAClBA,IAAQ,MACR,CAAC,MAAM,QAAQA,CAAG,GAClB,EAAEA,aAAe,SACjB,EAAEA,aAAe,KACtB,CAEA,SAASC,EAAuBC,EAAoCZ,EAAY,CAC/ES,EAAS,CAAE,KAAM,aAAc,SAAAG,EAAU,UAAWZ,CAAI,CAAE,CAC3D,CAQA,SAASa,EAAkBC,EAA2CF,EAAkC,CACvG,OAAO,eAAe,QAASE,EAAQ,CACtC,IAAK,IAAK,CAAG,EACb,IAAK,IAAM,UAAA,CAAcH,EAAuBC,EAAUb,EAAa,SAAS,CAAC,CAAG,EACpF,CACF,CAQA,SAASgB,EAAWC,EAAiCJ,EAAkC,CACtF,MAAMK,EAAS,QAAQD,CAAU,EAC3BE,EAAWD,EAAO,MAExB,IAAIE,EAAM,GAEV,OAAO,eAAeF,EAAQ,QAAS,CACtC,IAAK,IAAK,CAAG,EACb,IAAK,IAAM,CAACG,EAAqCC,EAAsCC,IAA6D,CACnJH,GAAOC,EAAM,SAASC,CAAQ,EAC9B,MAAME,EAAMJ,EAAI,OAAS,QAA2BA,EAAI,OAASA,EAAI,YAAY;CAAI,EACjFI,IAAQ,KACX,QAAQX,CAAQ,EAAEO,EAAI,MAAM,EAAGI,CAAG,CAAC,EACnCJ,EAAMA,EAAI,MAAMI,EAAM,CAAC,GAGxBL,EAAS,KAAKD,EAAQG,EAAOC,EAAUC,CAAQ,CAChD,EACA,CACF,CAGI,QAAQ,IAAI,yBAA8B,QAC7CT,EAAkB,OAAQ,KAAK,EAC/BA,EAAkB,MAAO,KAAK,EAC9BA,EAAkB,OAAQ,MAAM,EAChCA,EAAkB,QAAS,OAAO,IAElC,QAAQ,IAAM,UAAA,CAA2B,EACzC,QAAQ,KAAO,UAAA,CAA2B,EAC1C,QAAQ,KAAO,UAAA,CAA2B,EAC1CA,EAAkB,QAAS,OAAO,GAGnCE,EAAW,SAAU,OAAO,EAC5BA,EAAW,SAAU,KAAK,CAC3B,CAEA,SAASS,GAAgB,CAGxB,QAAQ,GAAG,oBAAqB,SAAUtD,EAAG,CAC5C,QAAQ,MAAM,uBAAwBA,CAAG,CAC1C,CAAC,EAGD,QAAQ,GAAG,qBAAsB,SAAUuD,EAAM,CAChD,QAAQ,MAAM,gCAAiCA,CAAM,CACtD,CAAC,CACF,CAEA,SAASC,GAA6B,CACrC,MAAMC,EAAY,OAAO,QAAQ,IAAI,iBAAoB,EAErD,OAAOA,GAAc,UAAY,CAAC,MAAMA,CAAS,GACpD,YAAY,UAAA,CACX,GAAI,CACH,QAAQ,KAAKA,EAAW,CAAC,CAC1B,MAAY,CACX,QAAQ,KAAI,CACb,CACD,EAAG,GAAI,CAET,CAEA,SAASC,GAAsB,CAC9B,MAAMC,EAA2B,QAAQ,IAAI,mCAC7C,GAAIA,EACH,GAAI,CAEC,QAAQ,eAAoB,OAAO,QAAQ,cAAiB,mBAAsB,YAErF,QAAQ,cAAiB,kBAAkB,cAAeA,CAAwB,CAEpF,OAASjC,EAAO,CACf,QAAQ,MAAMA,CAAK,CACpB,CAEF,CAKAgC,EAAsB,EAGtBvD,EAAE,EAEE,QAAQ,IAAI,2CACfF,EAA8B,QAAQ,IAAI,yCAA4C,EAIjF,QAAQ,MAAQ,QAAQ,IAAI,sBAA2B,QAC5D2B,EAAmB,EAIf,QAAQ,IAAI,gCAChB0B,EAAgB,EAIb,QAAQ,IAAI,mBACfE,EAA6B,EAI9B,MAAM7B,EAAE,EAGR,MAAM,OAAO,CAAC,KAAK,QAAQ,IAAI,qBAAwB,KAAK,EAAE,KAAK,GAAG","names":["_definePolyfillMarks","timeOrigin","_data","mark","name","getMarks","result","i","_define","entry","_factory","sharedObj","perf","$S","$T","path","fileURLToPath","createRequire","require","__dirname","didLogAboutSIGPIPE","setupCurrentWorkingDirectory","err","$P","injectPath","$Q","Module","globalPaths","originalResolveLookupPaths","moduleName","parent","paths","commonSuffixLength","fs","register","productObj","pkgObj","$N","$O","path2","overrides","setupNLSResult","setupNLS","doSetupNLS","nlsConfig","messagesFile","e","fs2","error","$U","pipeLoggingToParent","safeToString","args","seen","argsArray","arg","errorObj","res","key","value","isObject","safeSend","obj","safeSendConsoleMessage","severity","wrapConsoleMethod","method","wrapStream","streamName","stream","original","buf","chunk","encoding","callback","eol","handleExceptions","reason","terminateWhenParentTerminates","parentPid","configureCrashReporter","crashReporterProcessType"],"file":"bootstrap-fork.js"}